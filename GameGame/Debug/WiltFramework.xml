<?xml version="1.0"?>
<doc>
    <assembly>
        "WiltFramework"
    </assembly>
    <members>
        <member name="M:Wilt.Bitmap.SetOrigin(System.Single,System.Single)">
            <summary> Sets the position in texture coordinates that is defined as the origin </summary>
            <param name="offsetX"> Sets the X position of the origin in terms of texture coordidnates (0.0f - 1.0f) </param>
            <param name="offsetY"> Sets the Y position of the origin in terms of texture coordidnates (0.0f - 1.0f) </param>
            <remarks>
Texture coordinates are centered 0,0 at the top-left corner (i.e. to have the origin centered on the texture pass 
0.5,0.5 as the offsets)
</remarks>
        </member>
        <member name="M:Wilt.Bitmap.SetRotation(System.Single)">
            <summary> Rotates the texture around the specified origin by the rotation in radians </summary>
            <param name="rotation"> Value to rotate the texture in radians CCW </param>
            <remarks>
Rotates the texture around the specified origin by the rotation in radians
</remarks>
        </member>
        <member name="M:Wilt.Bitmap.SetScale(System.Single,System.Single)">
            <summary> Sets the size of the texture in scale from the default in the X and Y direction </summary>
            <param name="scaleX"> Value from 0.0f to inf to scale the texture in the X direction where 1.0f is the default </param>
            <param name="scaleY"> Value from 0.0f to inf to scale the texture in the Y direction where 1.0f is the default </param>
            <exception cref="T:std.exception"> Thrown when scale value is less than 0.0f </exception>
            <remarks>
Scales the texture the the specified amount (i.e. 2.0f is twice as big whereas 0.5f is half as big). Range
exception will be thrown for negative values but not 0.0f (texture will not be drawn). Scaling is applied
before rotation and position but after the origin application
</remarks>
        </member>
        <member name="M:Wilt.Bitmap.SetScale(System.Single)">
            <summary> Sets the size of the texture in scale from the default </summary>
            <param name="scale"> Value from 0.0f to inf to scale the texture where 1.0f is the default </param>
            <exception cref="T:std.exception"> Thrown when scale value is less than 0.0f </exception>
            <remarks>
Scales the texture the the specified amount (i.e. 2.0f is twice as big whereas 0.5f is half as big). Range
exception will be thrown for negative values but not 0.0f (texture will not be drawn)
</remarks>
        </member>
        <member name="M:Wilt.Bitmap.SetPosition(System.Single,System.Single)">
            <summary> Moves the texture to the specified screen coordinate </summary>
            <param name="positionX"> X location to render the texture </param>
            <param name="positionY"> Y location to render the texture </param>
            <remarks>
Sets the XY position to render the texture to. Coordinate system is centered in the bottom left corner of the
graphical window and steps in screen pixels. 
</remarks>
        </member>
        <member name="M:Wilt.Bitmap.GetTransformation">
            <summary> Gets the transformation matrix used to draw the texture </summary>
            <remarks>
Is the combination of origin, scale, rotation, and position matrices
</remarks>
        </member>
        <member name="M:Wilt.Bitmap.Shutdown">
            <summary> Releases graphics assets and deletes variables </summary>
            <remarks>
Releases and deletes vertex and index buffers as well as the texture used.
</remarks>
        </member>
        <member name="M:Wilt.Bitmap.Render(GraphicsObject*)">
            <summary> Renders the texture to the screen based on the scale, rotation, and position specified </summary>
            <param name="graphics"> A pointer to the GraphicsObject used to render the texture </param>
            <remarks>
Applies transformations and draws the texture to the screen
</remarks>
        </member>
        <member name="M:Wilt.Bitmap.Initialize(GraphicsObject*,System.Char*,System.UInt32,System.UInt32)">
            <summary> Initializes the Bitmap by loading the texture and sets up graphics elements </summary>
            <param name="graphics"> A pointer to the GraphicsObject used to render the texture </param>
            <param name="textureFilename"> The file location of the texture to be loaded </param>
            <param name="bitmapWidth"> The width of the texture </param>
            <param name="bitmapHeight"> The height of the texture </param>
            <exception cref="T:std.exception" />
            <remarks>
Gets the needed information from the graphics object in order to render the texture properly as well as creates
vertex and index buffers for the texture, also loads the texture as sets default values for scale, rotation,
and position
</remarks>
        </member>
        <member name="M:Wilt.Text.Initialize(GraphicsObject*,Wilt.Font*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Initializes the text from a string and position </summary>
        </member>
        <member name="M:InputObject.ReleaseMouse">
            <summary> If the mouse is locked on the screen, it is unlocked </summary>
            <remarks>
Makes the cursor reapear and unlocks the cursor on the window
</remarks>
        </member>
        <member name="M:InputObject.LockMouse">
            <summary> If the mouse is not locked on the screen, it is locked </summary>
            <remarks>
Makes the cursor dissapear and locks the cursor on the window
</remarks>
        </member>
        <member name="M:InputObject.IsFocused">
            <summary> Returns true if the mouse is locked on the window </summary>
            <remarks>
Returns true if the mouse is locked on the window
</remarks>
        </member>
        <member name="M:InputObject.IsButtonReleased(System.UInt32)">
            <summary> Returns true when a mouse button is released </summary>
            <param name="button"> Index of the button to be returned </param>
            <exception cref="T:std.exception"> Thrown when button index is out of bounds </exception>
            <remarks>
Returns true when the previous button-state is pressed and the current button-state is not pressed
</remarks>
        </member>
        <member name="M:InputObject.IsButtonPressed(System.UInt32)">
            <summary> Returns true while a mouse button is pressed </summary>
            <param name="button"> Index of the button to be returned </param>
            <exception cref="T:std.exception"> Thrown when button index is out of bounds </exception>
            <remarks>
Returns true when the current button-state is pressed and ignores the previous button-state
</remarks>
        </member>
        <member name="M:InputObject.IsButtonTriggered(System.UInt32)">
            <summary> Returns true when a mouse button is first pressed </summary>
            <param name="button"> Index of the button to be returned </param>
            <exception cref="T:std.exception"> Thrown when button index is out of bounds </exception>
            <remarks>
Returns true when the current button-state is pressed and the previous button-state is not pressed
</remarks>
        </member>
        <member name="M:InputObject.GetMouseLocation(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Sets the variables passed to the current mouse position </summary>
            <param name="positionX"> Variable to be set to the mouse's X coordinate </param>
            <param name="positionY"> Variable to be set to the mouse's Y coordinate </param>
            <remarks>
Sets the variables values based on the position of the virtual cursor in pixel units where the bottom left of the
window is the origin. Value is clamped to be within the window
</remarks>
        </member>
        <member name="M:InputObject.IsKeyReleased(System.UInt32)">
            <summary> Returns true when a keyboard key is released </summary>
            <param name="key"> Index of the key to be returned </param>
            <exception cref="T:std.exception"> Thrown when key index is out of bounds </exception>
            <remarks>
Returns true when the previous key-state is pressed and the current key-state is not pressed
</remarks>
        </member>
        <member name="M:InputObject.IsKeyPressed(System.UInt32)">
            <summary> Returns true while a keyboard key is pressed </summary>
            <param name="key"> Index of the key to be returned </param>
            <exception cref="T:std.exception"> Thrown when key index is out of bounds </exception>
            <remarks>
Returns true when the current key-state is pressed and ignores the previous key-state
</remarks>
        </member>
        <member name="M:InputObject.IsKeyTriggered(System.UInt32)">
            <summary> Returns true when a keyboard key is first pressed </summary>
            <param name="key"> Index of the key to be returned </param>
            <exception cref="T:std.exception"> Thrown when key index is out of bounds </exception>
            <remarks>
Returns true when the current key-state is pressed and the previous key-state is not pressed
</remarks>
        </member>
        <member name="M:InputObject.Shutdown">
            <summary> Releases input objects and deletes them </summary>
            <remarks>
Releases, deletes, and flags the mouse and keyboard objects as well as the direct input object. Note: keyboard
keystrokes will still be detected when mouse is unfocused but only if the window is on top and focused
</remarks>
        </member>
        <member name="M:InputObject.Update">
            <summary> Updates states of mouse and keyboard </summary>
            <exception cref="T:std.exception"> Thrown when either the keyboard or mouse is lost and cannot be reaquired </exception>
            <remarks>
Sets previous state from current state and gets the current state of keyboard and mouse. Updates mouse position
based on focus and clamps to window size
</remarks>
        </member>
        <member name="M:InputObject.Initialize(HINSTANCE__*,HWND__*,System.Int32,System.Int32)">
            <summary> Initializes the InputClass by acquiring the mouse and keyboard devices </summary>
            <param name="instance"> The current application instance that will be tied to the input devices </param>
            <param name="windowHandle"> The handle of the application window </param>
            <param name="screenWidth"> The width of the screen </param>
            <param name="screemHeight"> The height of the screen </param>
            <exception cref="T:std.exception"> Thrown when initialization of device fails </exception>
            <remarks>
Sets private variables and creates the direct input object. Uses that to create the keyboard and mouse.
</remarks>
        </member>
    </members>
</doc>